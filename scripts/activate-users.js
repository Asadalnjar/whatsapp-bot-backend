// scripts/activate-users.js
// ุชูุนูู ุฌููุน ุงููุณุชุฎุฏููู

const mongoose = require('mongoose');
require('dotenv').config();

// ุงุณุชูุฑุงุฏ ุงูููุงุฐุฌ
const User = require('../models/User');
const Subscription = require('../models/Subscription');

async function activateUsers() {
  try {
    // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
    await mongoose.connect(process.env.MONGO_URI);
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');

    // ุงูุจุญุซ ุนู ุฌููุน ุงููุณุชุฎุฏููู
    const users = await User.find({});
    console.log(`๐ ุชู ุงูุนุซูุฑ ุนูู ${users.length} ูุณุชุฎุฏู`);

    let activatedCount = 0;

    for (const user of users) {
      console.log(`\n๐ง ูุนุงูุฌุฉ ุงููุณุชุฎุฏู: ${user.email || user.name}`);
      console.log(`   ุงูุญุงูุฉ ุงูุญุงููุฉ: ${user.status}`);

      let updated = false;

      // ุชูุนูู ุงููุณุชุฎุฏู ุฅุฐุง ูู ููู ูุดุทุงู
      if (user.status !== 'active') {
        user.status = 'active';
        updated = true;
        activatedCount++;
        console.log('   โ ุชู ุชูุนูู ุงููุณุชุฎุฏู');
      }

      // ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงุดุชุฑุงู ูุดุท
      let subscription = await Subscription.findOne({ userId: user._id });
      
      if (!subscription) {
        // ุฅูุดุงุก ุงุดุชุฑุงู ุฌุฏูุฏ
        subscription = new Subscription({
          userId: user._id,
          plan: 'ุดูุฑู',
          status: 'active',
          startedAt: new Date(),
          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ููู
          amount: 0 // ูุฌุงูู ููุงุฎุชุจุงุฑ
        });
        
        await subscription.save();
        console.log('   โ ุชู ุฅูุดุงุก ุงุดุชุฑุงู ุฌุฏูุฏ');
      } else if (subscription.status !== 'active') {
        // ุชูุนูู ุงูุงุดุชุฑุงู ุงูููุฌูุฏ
        subscription.status = 'active';
        subscription.startedAt = new Date();
        subscription.expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);
        
        await subscription.save();
        console.log('   โ ุชู ุชูุนูู ุงูุงุดุชุฑุงู');
      } else {
        console.log('   โน๏ธ ุงูุงุดุชุฑุงู ูุดุท ุจุงููุนู');
      }

      if (updated) {
        await user.save();
        console.log('   โ ุชู ุญูุธ ุงูุชุญุฏูุซุงุช');
      } else {
        console.log('   โน๏ธ ุงููุณุชุฎุฏู ูุดุท ุจุงููุนู');
      }
    }

    console.log('\n๐ ุชู ุงูุงูุชูุงุก ูู ุชูุนูู ุงููุณุชุฎุฏููู!');
    console.log(`๐ ุฅุญุตุงุฆูุงุช:`);
    console.log(`   - ุฅุฌูุงูู ุงููุณุชุฎุฏููู: ${users.length}`);
    console.log(`   - ุงููุณุชุฎุฏููู ุงูููุนููู: ${activatedCount}`);

    // ุนุฑุถ ุงูุญุงูุฉ ุงูููุงุฆูุฉ
    const activeUsers = await User.find({ status: 'active' });
    const activeSubscriptions = await Subscription.find({ status: 'active' });
    
    console.log(`\nโ ุงูุญุงูุฉ ุงูููุงุฆูุฉ:`);
    console.log(`   - ุงููุณุชุฎุฏููู ุงููุดุทูู: ${activeUsers.length}`);
    console.log(`   - ุงูุงุดุชุฑุงูุงุช ุงููุดุทุฉ: ${activeSubscriptions.length}`);

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชูุนูู ุงููุณุชุฎุฏููู:', error);
  } finally {
    await mongoose.disconnect();
    console.log('โ ุชู ูุทุน ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
    process.exit(0);
  }
}

// ุชุดุบูู ุงูุชูุนูู
activateUsers();
